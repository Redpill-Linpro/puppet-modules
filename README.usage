== MODULES USAGE

The Next Gen Example42 Puppet modules share a common layout that make it possible
to use them with a coherent and standard (well, at least inside the same module set)
appoach.

A module (in this case we use openssh as sample) can be used in 3 ways:

* With the old style "Set variables and include class" pattern:

        $openssh_template = "example42/openssh/openssh.conf.erb"
        include openssh

* As a parametrized class:

        class { "openssh":
          template => "example42/openssh/openssh.conf.erb",
        }

* Using Hiera: all the module params have an automatic Hiera lookup, if
  Hiera is available.

You can even, under some degrees, mix these patterns.

You can for example set general top scope variables that affect all your parametrized classes:

        $puppi = true
        $monitor = true
        $monitor_tool = [ "nagios" , "munin" , "puppi" ]
        class { "openssh":
          template => "example42/openssh/openssh.conf.erb",
        }
        
The above example has the same effect of:

        class { "openssh":
          template     => "example42/openssh/openssh.conf.erb",
          puppi        => true,
          monitor      => true,
          monitor_tool => [ "nagios" , "munin" , "puppi" ],
        }

Note that if you use the "Set variables and include class" pattern you can define variables only
at the top level scope or in a ENC (External Node Classifer) like Puppet Dashboard, Puppet Enterprise Console or The Foreman.

Below you have an overview of the most important module's parameters (you can mix and aggregate them).

The examples use parametrized classes, but for all the parameters you can set a $openssh_ top scope variable.

For example, the variable "$openssh_absent" is equivant to the "absent =>" parameter or hiera_lookup('openssh_absent').

=== USAGE - Basic management
* Install openssh with default settings

        class { "openssh": }

* Disable openssh service.

        class { "openssh":
          disable => true
        }

* Disable openssh service at boot time, but don't stop if is running.

        class { "openssh":
          disableboot => true
        }

* Remove openssh package

        class { "openssh":
          absent => true
        }

* Enable auditing without without making changes on existing openssh configuration files

        class { "openssh":
          audit_only => true
        }


=== USAGE - Overrides and Customizations
* Use custom sources for main config file 

        class { "openssh":
          source => [ "puppet:///modules/lab42/openssh/openssh.conf-${hostname}" , "puppet:///modules/lab42/openssh/openssh.conf" ], 
        }


* Use custom source directory for the whole configuration dir

        class { "openssh":
          source_dir       => "puppet:///modules/lab42/openssh/conf/",
          source_dir_purge => false, # Set to true to purge any existing file not present in $source_dir
        }

* Use custom template for main config file 

        class { "openssh":
          template => "example42/openssh/openssh.conf.erb",      
        }

* Define custom options that can be used in a custom template without the
  need to add parameters to the openssh class

        class { "openssh":
          template => "example42/openssh/openssh.conf.erb",    
          options  => {
            'LogLevel' => 'INFO',
            'UsePAM'   => 'yes',
          },
        }

* Automaticallly include a custom subclass

        class { "openssh:"
          my_class => 'openssh::example42',
        }


=== USAGE - Example42 extensions management 
* Activate puppi (recommended, but disabled by default)
  Note that this option requires the usage of Example42 puppi module

        class { "openssh": 
          puppi    => true,
        }

* Activate puppi and use a custom puppi_helper template (to be provided separately with
  a puppi::helper define ) to customize the output of puppi commands 

        class { "openssh":
          puppi        => true,
          puppi_helper => "myhelper", 
        }

* Activate automatic monitoring (recommended, but disabled by default)
  This option requires the usage of Example42 monitor and relevant monitor tools modules

        class { "openssh":
          monitor      => true,
          monitor_tool => [ "nagios" , "monit" , "munin" ],
        }

* Activate automatic firewalling 
  This option requires the usage of Example42 firewall and relevant firewall tools modules

        class { "openssh":       
          firewall      => true,
          firewall_tool => "iptables",
          firewall_src  => "10.42.0.0/24",
          firewall_dst  => "$ipaddress_eth0",
        }


